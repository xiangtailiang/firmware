name: build
on:
  workflow_dispatch:

env:
  TAG_NAME: latest
  TG_TOKEN: ${{secrets.TELEGRAM_TOKEN_BOT_OPENIPC}}
  TG_CHANNEL: ${{secrets.TELEGRAM_CHANNEL_OPENIPC_DEV}}
  TG_OPTIONS: -s -o /dev/null -w %{http_code}

jobs:
  buildroot:
    name: Firmware
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ssc335
            release: lite
          - platform: ssc335de
            release: lite
          - platform: t31
            release: lite
        
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup ccache
        if: github.event_name != 'pull_request'
        uses: actions/cache@v3
        with:
          path: /tmp/ccache
          key: ${{matrix.platform}}_${{matrix.release}}

      - name: Restore ccache
        if: github.event_name == 'pull_request'
        uses: actions/cache/restore@v3
        with:
          path: /tmp/ccache
          key: ${{matrix.platform}}_${{matrix.release}}

      - name: Download files
        run: |
          echo "8.8.8.8 invisible-mirror.net" | sudo tee -a /etc/hosts
          echo "8.8.8.8 distfiles.dereferenced.org" | sudo tee -a /etc/hosts
          make prepare
          git clone https://github.com/openipc/br-cache
          ln -s ${GITHUB_WORKSPACE}/br-cache $(ls -d output/buildroot-*)/dl
          make BOARD=${{matrix.platform}}_${{matrix.release}} br-source

      - name: Build firmware
        run: |
          export GIT_HASH=$(git rev-parse --short ${GITHUB_SHA})
          export GIT_BRANCH=${GITHUB_REF_NAME}
          echo GIT_HASH=${GIT_HASH} >> ${GITHUB_ENV}
          echo GIT_BRANCH=${GIT_BRANCH} >> ${GITHUB_ENV}

          mkdir -p /tmp/ccache
          ln -s /tmp/ccache ${HOME}/.ccache
          make BOARD=${{matrix.platform}}_${{matrix.release}} all

          TIME=$(date -d @${SECONDS} +%M:%S)
          echo TIME=${TIME} >> ${GITHUB_ENV}

          NORFW=${GITHUB_WORKSPACE}/output/images/openipc.${{matrix.platform}}-nor-${{matrix.release}}.tgz
          if [ -e ${NORFW} ]; then
            echo NORFW=${NORFW} >> ${GITHUB_ENV}
          fi

          NANDFW=${GITHUB_WORKSPACE}/output/images/openipc.${{matrix.platform}}-nand-${{matrix.release}}.tgz
          if [ -e ${NANDFW} ]; then
            echo NANDFW=${NANDFW} >> ${GITHUB_ENV}
          fi

      - name: Upload firmware
        if: github.event_name != 'pull_request' && matrix.custom != 'onlyci'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{env.TAG_NAME}}
          files: |
            ${{env.NORFW}}
            ${{env.NANDFW}}

      - name: Send binary
        if: github.event_name != 'pull_request' && matrix.custom != 'onlyci' && env.NORFW
        run: |
          TG_MSG="Commit: ${GIT_HASH}\nBranch: ${GIT_BRANCH}\nTag: ${TAG_NAME}\nTime: ${TIME}\n\n"
          TG_ICON="\xE2\x9C\x85 GitHub Actions"
          TG_HEADER=$(echo -e ${TG_MSG}${TG_ICON})
          HTTP=$(curl ${TG_OPTIONS} -H "Content-Type: multipart/form-data" -X POST https://api.telegram.org/bot${TG_TOKEN}/sendDocument -F chat_id=${TG_CHANNEL} -F caption="${TG_HEADER}" -F document=@${NORFW})
          echo Telegram response: ${HTTP}

      - name: Send error
        if: github.event_name != 'pull_request' && failure()
        run: |
          TG_WARN="Error: ${{matrix.platform}}_${{matrix.release}}\n"
          TG_MSG="Commit: ${GIT_HASH}\nBranch: ${GIT_BRANCH}\nTag: ${TAG_NAME}\n\n"
          TG_ICON="\xE2\x9A\xA0 GitHub Actions"
          TG_HEADER=$(echo -e ${TG_WARN}${TG_MSG}${TG_ICON})
          HTTP=$(curl ${TG_OPTIONS} -H "Content-Type: multipart/form-data" -X POST https://api.telegram.org/bot${TG_TOKEN}/sendMessage -F chat_id=${TG_CHANNEL} -F text="${TG_HEADER}")
          echo Telegram response: ${HTTP}
